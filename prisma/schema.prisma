generator client {
  provider = "prisma-client-js"
  // remove the `output` line so the client is generated in node_modules
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model buyer_history {
  id        String   @id @default(cuid())
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  diff      Json
  buyers    buyers   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model buyers {
  id            String          @id @default(cuid())
  fullName      String          @db.VarChar(80)
  email         String?         @db.VarChar(255)
  phone         String          @db.VarChar(15)
  city          City
  propertyType  PropertyType
  bhk           BHK?
  purpose       Purpose
  budgetMin     Int?
  budgetMax     Int?
  timeline      Timeline
  source        Source
  status        Status          @default(NEW)
  notes         String?         @db.VarChar(1000)
  tags          String[]
  ownerId       String
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  buyer_history buyer_history[]
  users         users           @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([city])
  @@index([ownerId])
  @@index([propertyType])
  @@index([status])
  @@index([timeline])
}

model users {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("USER")
  Account       Account[]
  Session       Session[]
  buyers        buyers[]
}

enum BHK {
  STUDIO
  ONE
  TWO
  THREE
  FOUR
}

enum City {
  CHANDIGARH
  MOHALI
  ZIRAKPUR
  PANCHKULA
  OTHER
}

enum PropertyType {
  APARTMENT
  VILLA
  PLOT
  OFFICE
  RETAIL
}

enum Purpose {
  BUY
  RENT
}

enum Source {
  WEBSITE
  REFERRAL
  WALK_IN
  CALL
  OTHER
}

enum Status {
  NEW
  QUALIFIED
  CONTACTED
  VISITED
  NEGOTIATION
  CONVERTED
  DROPPED
}

enum Timeline {
  ZERO_TO_THREE
  THREE_TO_SIX
  MORE_THAN_SIX
  EXPLORING
}
